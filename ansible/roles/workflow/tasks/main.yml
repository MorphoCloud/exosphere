---

- fail:
    msg: "workflow_source_repository is a mandatory value"
  when: 'workflow_source_repository is not defined or workflow_source_repository == ""'

# Write to console that workflow provisioning has started
- shell: 'echo ''{"exoWorkflowSetup":"started"}'' > {{ console_file }}'

- name: 'custom workflow details logging script copied into place'
  copy:
    src: 'custom_workflow_json.sh'
    dest: '/opt/custom_workflow_json.sh'
    mode: '0544'

- name: 'repo cloned locally if needed'
  become: true
  become_user: 'exouser'
  git:
    repo: '{{ workflow_source_repository }}'
    version: '{{ workflow_repo_version }}'
    dest: '/home/exouser/workflow'
  when: 'workflow_local_download == true'

- name: 'data directory created'
  file:
    path: '/data'
    state: 'directory'
    owner: 'exouser'

# We are assuming that virtualenv is installed, should already be done by cloud-init.
- name: 'repo2docker installed'
  pip:
    name:
      - 'six'
      - 'chardet'  # Temporary workaround for this bug: https://github.com/jupyterhub/repo2docker/issues/1065
      - 'jupyter-repo2docker'
    virtualenv_command: 'python3 -m venv'
    virtualenv: '/opt/repo2docker-venv'

- set_fact:
    repo2docker_repo_arg: '{{ ''/home/exouser/workflow'' if workflow_local_download == true else workflow_source_repository }}'

- name: 'repo2docker called to build container image'
  become: true
  become_user: 'exouser'
  register: result
  retries: 3
  delay: 10
  until: result is not failed
  command:
    argv:
      - '/opt/repo2docker-venv/bin/jupyter-repo2docker'
      - '--json-logs'
      - '--image-name'
      - 'exosphere-workflow'
      - '--no-run'
      - '--ref'
      - '{{ workflow_repo_version }}'
      - '{{ repo2docker_repo_arg }}'

- name: 'custom-workflow.service systemd unit file templated and copied into place'
  template:
    src: 'custom-workflow.service.j2'
    dest: '/etc/systemd/system/custom-workflow.service'

- name: 'custom-workflow-publish-auth-token.service systemd unit file templated and copied into place'
  template:
    src: 'custom-workflow-publish-auth-token.service.j2'
    dest: '/etc/systemd/system/custom-workflow-publish-auth-token.service'

- name: 'custom-workflow-publish-auth-token.timer systemd unit file copied into place'
  copy:
    src: 'custom-workflow-publish-auth-token.timer'
    dest: '/etc/systemd/system/custom-workflow-publish-auth-token.timer'

- name: 'custom-workflow.service systemd service enabled and started'
  systemd:
    name: 'custom-workflow.service'
    daemon_reload: 'yes'
    enabled: 'yes'
    state: 'started'

- name: 'custom-workflow-publish-auth-token.service systemd service enabled and started'
  systemd:
    name: 'custom-workflow-publish-auth-token.service'
    daemon_reload: 'yes'
    enabled: 'yes'

- name: 'custom-workflow-publish-auth-token.timer systemd timer enabled and started'
  systemd:
    name: 'custom-workflow-publish-auth-token.timer'
    daemon_reload: 'yes'
    enabled: 'yes'
    state: 'started'

- name: 'Jupyter notebook token determined'
  shell: 'docker exec custom-workflow.service jupyter notebook list | grep -m 1 -Po ''(token=)\K[a-f0-9]+'''
  register: 'workflow_token'
  retries: 3
  delay: 10
  until: workflow_token is not failed
  check_mode: false

# Write to console that workflow provisioning is complete
- shell: 'echo ''{"exoWorkflowSetup":"complete"}'' > {{ console_file }}'
