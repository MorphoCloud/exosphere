---

- fail:
    msg: "workflow_source_repository is a mandatory value"
  when: 'workflow_source_repository is not defined or workflow_source_repository == ""'

# Write to console that workflow provisioning has started
- shell: 'echo ''{"exoWorkflowSetup":"started"}'' > /dev/console'

- name: 'repo cloned locally if needed'
  git:
    repo: '{{ workflow_source_repository }}'
    version: '{{ workflow_repo_version }}'
    dest: '/opt/workflow'
  when: 'workflow_local_download == true'

- name: 'data directory created'
  file:
    path: '/data'
    state: 'directory'
    owner: 'exouser'

# We are assuming that virtualenv is installed, should already be done by cloud-init.
- name: 'repo2docker installed'
  pip:
    name:
      - 'six'
      - 'jupyter-repo2docker'
    virtualenv: '/opt/repo2docker-venv'

- set_fact:
    repo2docker_repo_arg: '{{ ''/opt/workflow'' if workflow_local_download == true else workflow_source_repository }}'

- name: 'repo2docker called to build container image'
  become: 'yes'
  become_user: 'exouser'
  command:
    argv:
      - '/opt/repo2docker-venv/bin/jupyter-repo2docker'
      - '--json-logs'
      - '--image-name'
      - 'exosphere-workflow'
      - '--no-run'
      - '--ref'
      - '{{ workflow_repo_version }}'
      - '{{ repo2docker_repo_arg }}'

# This is allowed to fail because container may already exist

- name: 'docker container created from new image'
  command:
    argv:
      - 'docker'
      - 'run'
      - '--detach'
      - '--restart'
      - 'always'
      - '--name'
      - 'workflow'
      - '--volume'
      - '/data:/data:rw'
      - '-p'
      - '8888:8888'
      - 'exosphere-workflow'
      - 'jupyter'
      - 'notebook'
      - '--ip'
      - '0.0.0.0'
  failed_when: false

- name: 'Jupyter notebook cookie secret determined'
  shell: 'docker exec workflow jupyter notebook list | grep -m 1 -Po ''(token=)\K[a-f0-9]+'''
  register: 'workflow_cookie_secret'
  check_mode: false
  no_log: true

# Write to console that workflow provisioning is complete
- shell: 'echo ''{"exoWorkflowCookieSecret":"{{ workflow_cookie_secret.stdout }}"}'' > /dev/console'
  check_mode: false
  no_log: true

# Write to console that workflow provisioning is complete
- shell: 'echo ''{"exoWorkflowSetup":"complete"}'' > /dev/console'